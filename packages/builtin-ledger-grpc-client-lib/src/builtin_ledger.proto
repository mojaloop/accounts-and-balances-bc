syntax = "proto3";

import "google/protobuf/empty.proto";

service GrpcBuiltinLedger {
  // All unary RPCs.
  rpc CreateAccounts(BuiltinLedgerGrpcCreateAccountArray) returns (BuiltinLedgerGrpcCreateIdsResponse);
  rpc CreateJournalEntries(BuiltinLedgerGrpcCreateJournalEntryArray) returns (BuiltinLedgerGrpcIdArray);

  rpc GetAccountsByIds(BuiltinLedgerGrpcIdArray) returns (BuiltinLedgerGrpcAccountArray);
  rpc GetJournalEntriesByAccountId(BuiltinLedgerGrpcId) returns (BuiltinLedgerGrpcJournalEntryArray);

  rpc DeleteAccountsByIds(BuiltinLedgerGrpcIdArray) returns (google.protobuf.Empty);
  rpc DeactivateAccountsByIds(BuiltinLedgerGrpcIdArray) returns (google.protobuf.Empty);
  rpc ActivateAccountsByIds(BuiltinLedgerGrpcIdArray) returns (google.protobuf.Empty);

//  // High level requests
//  rpc CheckLiquidAndReserve(BuiltinLedgerGrpcCheckLiquidAndReserveRequest) returns (google.protobuf.Empty);
//  rpc CancelReservationAndCommit(BuiltinLedgerGrpcCancelReservationAndCommitRequest) returns (google.protobuf.Empty);
//  // this will only cancel the reservation, to revert the payer position account to the good state
//  rpc CancelReservation(BuiltinLedgerGrpcCancelReservationRequest) returns (google.protobuf.Empty);

  // batch requests
  rpc ProcessHighLevelBatch(BuiltinLedgerGrpcHighLevelRequestArray) returns (BuiltinLedgerGrpcHighLevelResponseArray);

//  rpc GetServiceInfo() returns ()
}

/*
message BuiltinGrpcServiceInfo{
    bool healthy = 1;
    string version = 2;

}
*/


// batch requests

//enum EnumSample {
//    option allow_alias = true;
//    UNKNOWN = 0;
//    STARTED = 1;
//    RUNNING = 1;
//}

message BuiltinLedgerGrpcHighLevelRequestArray {
    repeated BuiltinLedgerGrpcHighLevelRequest requestArray = 1;
}

message BuiltinLedgerGrpcHighLevelRequest {
    int32 requestType = 1;
    string requestId = 2;
    string payerPositionAccountId = 3;
    string payerLiquidityAccountId = 4;
    string payeePositionAccountId = 5;
    string hubJokeAccountId = 6;
    string transferAmount = 7;
    string currencyCode = 8;
    string payerNetDebitCap = 9; // same currency unit as transfer
    string transferId = 10;
}

message BuiltinLedgerGrpcHighLevelResponseArray {
    repeated BuiltinLedgerGrpcHighLevelResponse responseArray  = 1;
}

message BuiltinLedgerGrpcHighLevelResponse {
    int32 requestType = 1;
    string requestId = 2;
    bool success = 3;
    string errorMessage = 4;
}




/* Ids */
// Used to send queries
message BuiltinLedgerGrpcId {
  string builtinLedgerGrpcId = 1;
}
message BuiltinLedgerGrpcIdArray {
  repeated BuiltinLedgerGrpcId builtinLedgerGrpcIdArray = 1;
}

// Used as responses by create methods that create arrays
// This allows the caller to pass a requestedId and later map the response
// in case this service could not honor the requested id
message BuiltinLedgerGrpcCreatedId {
  string requestedId = 1;
  string attributedId = 2;
}
message BuiltinLedgerGrpcCreateIdsResponse {
  repeated BuiltinLedgerGrpcCreatedId ids = 1;
}

/* Create requests. */

message BuiltinLedgerGrpcCreateAccount {
  string requestedId = 1;
  string type = 3;
  string currencyCode = 4;
}
message BuiltinLedgerGrpcCreateAccountArray {
  repeated BuiltinLedgerGrpcCreateAccount accountsToCreate = 1;
}

message BuiltinLedgerGrpcCreateJournalEntry {
  string ownerId = 1;
  string currencyCode = 2;
  string amount = 3;
  bool pending = 4;
  string debitedAccountId = 5;
  string creditedAccountId = 6;
}
message BuiltinLedgerGrpcCreateJournalEntryArray {
  repeated BuiltinLedgerGrpcCreateJournalEntry entriesToCreate = 1;
}

/* Account. */

message BuiltinLedgerGrpcAccount {
  string id = 1;
  string state = 2;
  string type = 3;
  string currencyCode = 4;
  string postedDebitBalance = 5;
  string pendingDebitBalance = 6;
  string postedCreditBalance = 7;
  string pendingCreditBalance = 8;
  uint64 timestampLastJournalEntry = 9;
}

message BuiltinLedgerGrpcAccountArray {
  repeated BuiltinLedgerGrpcAccount builtinLedgerGrpcAccountArray = 1;
}

/* Journal entry. */

message BuiltinLedgerGrpcJournalEntry {
  string id = 1;
  string ownerId = 2;
  string currencyCode = 3;
  string amount = 4;
  bool pending = 5;
  string debitedAccountId = 6;
  string creditedAccountId = 7;
  uint64 timestamp = 8;
}

message BuiltinLedgerGrpcJournalEntryArray {
  repeated BuiltinLedgerGrpcJournalEntry builtinLedgerGrpcJournalEntryArray = 1;
}

//
///*
//High level requests
//*/
////message GrpcSuccessResponse {
////  bool success = 1;
////}
//
//message BuiltinLedgerGrpcCheckLiquidAndReserveRequest {
//  string payerPositionAccountId = 1;
//  string payerLiquidityAccountId = 2;
//  string hubJokeAccountId = 3;
//  string transferAmount = 4;
//  string currencyCode = 5;
//  string payerNetDebitCap = 6; // same currency unit as transfer
//  string transferId = 7;
//}
//
//message BuiltinLedgerGrpcCancelReservationAndCommitRequest {
//  string payerPositionAccountId = 1;
//  string payeePositionAccountId = 2;
//  string hubJokeAccountId = 3;
//  string transferAmount = 4;
//  string currencyCode = 5;
//  string transferId = 6;
//}
//
//message BuiltinLedgerGrpcCancelReservationRequest {
//  string payerPositionAccountId = 1;
//  string hubJokeAccountId = 3;
//  string transferAmount = 4;
//  string currencyCode = 5;
//  string transferId = 6;
//}
